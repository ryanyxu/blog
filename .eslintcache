[{"/Users/ryan/Documents/dev/blog/src/App.js":"1","/Users/ryan/Documents/dev/blog/src/index.js":"2"},{"size":8719,"mtime":1608609250560,"results":"3","hashOfConfig":"4"},{"size":614,"mtime":1608584820373,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"5aluq3",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ryan/Documents/dev/blog/src/App.js",["11","12","13","14","15","16","17"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Editor,\n  EditorState,\n  RichUtils,\n  getDefaultKeyBinding,\n  KeyBindingUtil,\n  convertFromRaw,\n  convertToRaw,\n  Modifier,\n} from \"draft-js\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useParams,\n  withRouter,\n  Link,\n} from \"react-router-dom\";\n\nimport \"draft-js/dist/Draft.css\";\nimport \"./App.css\";\n\nimport firebase from \"firebase\";\n\nimport {\n  IconButton,\n  Grid,\n  Divider,\n  Button,\n  Box,\n  List,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\nimport ArrowBackRoundedIcon from \"@material-ui/icons/ArrowBackRounded\";\n\nconst App = () => (\n  <Router>\n    <Switch>\n      <Route path=\"/:page\" children={<Notepad />} />\n      <Route path=\"/\" children={<Home />} />\n    </Switch>\n  </Router>\n);\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { pages: [] };\n    firebase\n      .database()\n      .ref(\"page\")\n      .orderByChild(\"created\")\n      .on(\"child_added\", (snapshot) => {\n        this.setState({ pages: [...this.state.pages, snapshot.key] });\n      });\n  }\n\n  render() {\n    return (\n      <Grid\n        className=\"home\"\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <div\n          style={{ marginRight: \"10vmin\", marginBottom: \"3vmin\", fontSize: 60 }}\n        >\n          Ryan's notes\n        </div>\n\n        <Divider orientation=\"vertical\" flexItem />\n        <Box\n          style={{\n            maxHeight: \"60vh\",\n            overflow: \"auto\",\n            width: \"auto\",\n            fontSize: 30,\n          }}\n        >\n          {this.state.pages.map((page) => (\n            <ListItem button component=\"a\" href={\"/\" + page}>\n              {page}\n            </ListItem>\n          ))}\n        </Box>\n      </Grid>\n    );\n  }\n}\n\nconst Notepad = () => {\n  const { page } = useParams();\n\n  const getEmpty = () => {\n    let key = page + \"T\";\n    var test =\n      '{\"blocks\":[{\"key\":\"' +\n      key +\n      '\",\"text\":\"' +\n      page +\n      '\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{}}';\n    return EditorState.createWithContent(convertFromRaw(JSON.parse(test)));\n  };\n\n  const [titleEditorState, setTitleEditorState] = React.useState(() =>\n    getEmpty()\n  );\n\n  const [editorState, setEditorState] = React.useState(() =>\n    EditorState.createEmpty()\n  );\n\n  const [createdState, setCreatedState] = React.useState(() => \"\");\n  const [newState, setNewState] = React.useState(false);\n\n  useEffect(() => {\n    firebase\n      .database()\n      .ref(\"page\")\n      .child(page)\n      .on(\"value\", (snapshot) => {\n        if (snapshot.val()) {\n          let title = EditorState.createWithContent(\n            convertFromRaw(JSON.parse(snapshot.val().title))\n          );\n          let editor = EditorState.createWithContent(\n            convertFromRaw(JSON.parse(snapshot.val().content))\n          );\n          setTitleEditorState(title);\n          setEditorState(editor);\n          setCreatedState(snapshot.val().created);\n        } else {\n          setCreatedState(Date.now().toString());\n          setNewState(true);\n        }\n      });\n  }, []);\n\n  const save = () => {\n    if (newState) {\n      firebase\n        .database()\n        .ref(\"page\")\n        .child(page)\n        .set({\n          created: createdState,\n          edited: Date.now().toString(),\n          title: JSON.stringify(\n            convertToRaw(titleEditorState.getCurrentContent())\n          ),\n          content: JSON.stringify(\n            convertToRaw(editorState.getCurrentContent())\n          ),\n        });\n    } else {\n      firebase\n        .database()\n        .ref(\"page\")\n        .child(page)\n        .update({\n          edited: Date.now().toString(),\n          title: JSON.stringify(\n            convertToRaw(titleEditorState.getCurrentContent())\n          ),\n          content: JSON.stringify(\n            convertToRaw(editorState.getCurrentContent())\n          ),\n        });\n    }\n  };\n\n  const onTab = (e) => {\n    e.preventDefault();\n    let currentState = editorState;\n\n    const selection = currentState.getSelection();\n    const blockType = currentState\n      .getCurrentContent()\n      .getBlockForKey(selection.getStartKey())\n      .getType();\n\n    if (\n      blockType === \"unordered-list-item\" ||\n      blockType === \"ordered-list-item\"\n    ) {\n      setEditorState(RichUtils.onTab(e, currentState, 3));\n    } else {\n      let newContentState = Modifier.replaceText(\n        currentState.getCurrentContent(),\n        currentState.getSelection(),\n        \"        \"\n      );\n\n      setEditorState(\n        EditorState.push(currentState, newContentState, \"insert-characters\")\n      );\n    }\n  };\n\n  const handleKeyCommand = (command, editorState, b) => {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newState) {\n      if (b) {\n        setTitleEditorState(newState);\n      } else {\n        setEditorState(newState);\n      }\n      return \"handled\";\n    }\n\n    return \"not-handled\";\n  };\n\n  const { hasCommandModifier } = KeyBindingUtil;\n\n  const keyBinding = (e) => {\n    if (e.keyCode === 83 /* `S` key */ && hasCommandModifier(e)) {\n      e.preventDefault();\n      save();\n      return \"save\";\n    }\n    /*\n    console.log(e.keyCode)\n    if (e.keyCode === 32) {\n      var selectionState = editorState.getSelection();\n      var anchorKey = selectionState.getAnchorKey();\n      var currentContent = editorState.getCurrentContent();\n      var currentContentBlock = currentContent.getBlockForKey(anchorKey);\n      var text = currentContentBlock.getText()\n      if (text.length === 1 && text[0] === '-') {\n        console.log('i am here')\n        var newState = RichUtils.toggleBlockType(\n          editorState,\n          'unordered-list-item'\n        )\n        setEditorState(newState)\n        return 'list'\n      }\n    }\n    */\n\n    return getDefaultKeyBinding(e);\n  }\n  return (\n    <div>\n      <Box style={{background: 'transparent', height:'0vh'} /* set body margin to -5 if needed */}>\n        <IconButton\n            aria-label=\"home\"\n            href=\"/\"\n            style={{ margin: \"4vmin 0 0 4vmin\" }}\n          >\n            <ArrowBackRoundedIcon fontSize=\"large\" />\n          </IconButton>\n        </Box>\n      <Box\n        style={{\n          padding: '20vmin 30vmin',//\"12vmin 30vmin\",\n          maxHeight: '60vh',\n          overflow: 'auto',\n        }}\n      >\n        <div\n          style={{ marginTop: \"1vmin\", marginBottom: \"5vmin\", fontSize: 45 }}\n        >\n          <Editor\n            editorState={titleEditorState}\n            onChange={setTitleEditorState}\n            handleKeyCommand={(c, e) => handleKeyCommand(c, e, true)}\n            keyBindingFn={keyBinding}\n            readOnly={false}\n            placeholder=\"title\"\n          />\n        </div>\n\n        <Divider variant=\"middle\" />\n\n        <div style={{ marginTop: \"5vmin\", fontSize: 30 }}>\n          <Editor\n            editorState={editorState}\n            onChange={setEditorState}\n            handleKeyCommand={(c, e) => handleKeyCommand(c, e, false)}\n            keyBindingFn={keyBinding}\n            readOnly={false}\n            placeholder=\"my thoughts...\"\n            onTab={onTab}\n          />\n        </div>\n      </Box>\n    </div>\n  );\n\n  /*\n\n  <div style={{ fontSize: 25 }}>\n    {new Date(createdState).toLocaleDateString()}\n  </div>\n  */\n  /*\n  return (\n    <div>\n      <div style={{ maxHeight: \"10vh\" }}>\n        <IconButton\n          aria-label=\"home\"\n          href=\"/\"\n          style={{ margin: \"4vmin 0 0 4vmin\" }}\n        >\n          <ArrowBackRoundedIcon fontSize=\"large\" />\n        </IconButton>\n      </div>\n      <Box\n        style={{\n          margin: \"12vmin 30vmin\",\n          maxHeight: \"90vh\",\n          overflow: \"auto\",\n        }}\n      >\n        <div\n          style={{ marginTop: \"1vmin\", marginBottom: \"5vmin\", fontSize: 45 }}\n        >\n          <Editor\n            editorState={titleEditorState}\n            onChange={setTitleEditorState}\n            handleKeyCommand={(c, e) => handleKeyCommand(c, e, true)}\n            keyBindingFn={keyBinding}\n            readOnly={false}\n            placeholder=\"title\"\n          />\n        </div>\n\n        <Divider variant=\"middle\" />\n\n        <div style={{ marginTop: \"5vmin\", fontSize: 30 }}>\n          <Editor\n            editorState={editorState}\n            onChange={setEditorState}\n            handleKeyCommand={(c, e) => handleKeyCommand(c, e, false)}\n            keyBindingFn={keyBinding}\n            readOnly={false}\n            placeholder=\"my thoughts...\"\n            onTab={onTab}\n          />\n        </div>\n      </Box>\n    </div>\n  );\n  */\n};\n\nexport default App;\n","/Users/ryan/Documents/dev/blog/src/index.js",[],{"ruleId":"18","severity":1,"message":"19","line":1,"column":17,"nodeType":"20","messageId":"21","endLine":1,"endColumn":25},{"ruleId":"18","severity":1,"message":"22","line":18,"column":3,"nodeType":"20","messageId":"21","endLine":18,"endColumn":13},{"ruleId":"18","severity":1,"message":"23","line":19,"column":3,"nodeType":"20","messageId":"21","endLine":19,"endColumn":7},{"ruleId":"18","severity":1,"message":"24","line":31,"column":3,"nodeType":"20","messageId":"21","endLine":31,"endColumn":9},{"ruleId":"18","severity":1,"message":"25","line":33,"column":3,"nodeType":"20","messageId":"21","endLine":33,"endColumn":7},{"ruleId":"18","severity":1,"message":"26","line":35,"column":3,"nodeType":"20","messageId":"21","endLine":35,"endColumn":15},{"ruleId":"27","severity":1,"message":"28","line":142,"column":6,"nodeType":"29","endLine":142,"endColumn":8,"suggestions":"30"},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'withRouter' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'List' is defined but never used.","'ListItemText' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'page'. Either include it or remove the dependency array.","ArrayExpression",["31"],{"desc":"32","fix":"33"},"Update the dependencies array to be: [page]",{"range":"34","text":"35"},[3199,3201],"[page]"]